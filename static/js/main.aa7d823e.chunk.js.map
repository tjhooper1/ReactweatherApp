{"version":3,"sources":["components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","react_default","a","createElement","className","city","temp","src","icon","alt","onSubmit","handleClick","onChange","handleChange","placeholder","API_KEY","process","URL","concat","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","preventDefault","state","fetch","then","response","json","data","setState","location","name","temperature","current","temp_f","condition","catch","err","alert","target","reset","value","_this2","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAEe,SAASA,EAASC,GAC7B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,eACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,eAA4CJ,EAAMK,MAClDJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuBJ,EAAMM,KAA5C,sBACAL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAeH,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMQ,KAAMC,IAAI,UACxDR,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOM,SAAUV,EAAMW,aACnCV,EAAAC,EAAAC,cAAA,SAAOS,SAAUZ,EAAMa,aAAcC,YAAY,gBACjDb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OAAlB,aCTpB,IAAMW,EAAUC,kCACZX,EAAO,eACPY,EAAG,6CAAAC,OAAgDH,EAAhD,OAAAG,OAA6Db,GA2ErDc,cAvEb,SAAAA,EAAYnB,GAAM,IAAAoB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMvB,KAuBRW,YAAc,SAACgB,GACbA,EAAEC,iBACFvB,EAAOe,EAAKS,MAAMxB,KAClByB,MAAK,6CAAAZ,OAA8CH,EAA9C,OAAAG,OAA2Db,IAC/D0B,KAAK,SAACC,GACL,OAAOA,EAASC,SAEjBF,KAAK,SAACG,GACLd,EAAKe,SAAS,CACZ9B,KAAM6B,EAAKE,SAASC,KACpBC,YAAaJ,EAAKK,QAAQC,OAC1BhC,KAAM0B,EAAKK,QAAQE,UAAUjC,SAGhCkC,MAAM,SAACC,GACFA,IACFC,MAAM,4BACNxB,EAAKe,SAAS,CACZ9B,KAAM,QAIZsB,EAAEkB,OAAOC,SA9CO1B,EAiDlBP,aAAe,SAACc,GACdP,EAAKe,SAAS,CACZ9B,KAAMsB,EAAEkB,OAAOE,SAjDjB3B,EAAKS,MAAQ,CACXxB,KAAMA,EACNiC,YAAa,GACb9B,KAAM,IALQY,mFAUC,IAAA4B,EAAAzB,KACjBO,MAAMb,GACLc,KAAK,SAACC,GACL,OAAOA,EAASC,SAEjBF,KAAK,SAACG,GACLc,EAAKb,SAAS,CACZ9B,KAAM6B,EAAKE,SAASC,KACpBC,YAAaJ,EAAKK,QAAQC,OAC1BhC,KAAM0B,EAAKK,QAAQE,UAAUjC,0CAqCjC,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACJ,EAAD,CACAc,aAAcU,KAAKV,aACnBF,YAAaY,KAAKZ,YAClBN,KAAMkB,KAAKM,MAAMxB,KACjBC,KAAMiB,KAAKM,MAAMS,YACjB9B,KAAMe,KAAKM,MAAMrB,eAjEPyC,aCKEC,QACW,cAA7BC,OAAOf,SAASgB,UAEe,UAA7BD,OAAOf,SAASgB,UAEhBD,OAAOf,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.aa7d823e.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Weather (props) {\n    return (\n        <div className=\"main-container\">\n            <div className=\"heading\">Weather app</div>\n            <div className=\"weather-container\">\n                <div className=\"weather-title\">Weather for {props.city}</div>    \n                <div className=\"weather-temperature\">{props.temp} degrees farenheit</div>    \n                <div className=\"weather-icon\"><img src={props.icon} alt=\"icon\" /></div>\n                <form className=\"form\" onSubmit={props.handleClick}>\n                    <input onChange={props.handleChange} placeholder=\"Change city\" />\n                    <button className=\"btn\">Submit</button>    \n                </form>\n            </div>\n        </div>\n    )\n}","import React, { Component } from 'react';\nimport './App.scss';\nimport Weather from './components/Weather'\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\nlet city = 'jacksonville';\nlet URL = `https://api.apixu.com/v1/current.json?key=${API_KEY}&q=${city}`;\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props)\n    this.state = {\n      city: city,\n      temperature: '',\n      icon: ''\n    }\n    \n  }\n  \n  componentDidMount(){\n    fetch(URL)\n    .then((response) => {\n      return response.json();\n    })\n    .then((data) => {\n      this.setState({\n        city: data.location.name,\n        temperature: data.current.temp_f,\n        icon: data.current.condition.icon\n      })\n    });\n  }\n   \n  handleClick = (e) => {\n    e.preventDefault();\n    city = this.state.city\n    fetch(`https://api.apixu.com/v1/current.json?key=${API_KEY}&q=${city}`)\n    .then((response) => {\n      return response.json();\n    })\n    .then((data) => {      \n      this.setState({\n        city: data.location.name,\n        temperature: data.current.temp_f,\n        icon: data.current.condition.icon\n      })\n    })\n    .catch((err) => {\n      if (err) {\n        alert(\"could not find that city\");\n        this.setState({\n          city: ''\n        })\n      }\n    })\n    e.target.reset();\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      city: e.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Weather \n        handleChange={this.handleChange} \n        handleClick={this.handleClick} \n        city={this.state.city} \n        temp={this.state.temperature}\n        icon={this.state.icon}\n        />\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}